{"version":3,"sources":["store/actions.ts","components/Cell/Cell.tsx","components/GameLogo/GameLogo.tsx","store/types.ts","components/Battlefield/index.tsx","components/StartButton/index.tsx","components/PreloadImages/index.tsx","store/selectors.ts","components/YouWinPopup/index.tsx","App.tsx","utils.ts","store/rootReducer.ts","store/index.ts","index.tsx"],"names":["EActionTypes","mapDispatch","fire","cell","type","FIRE","connector","connect","shipId","isShot","coordinates","console","log","column","row","cellClassName","className","onClick","GameLogoComponent","src","NOT_STARTED_STATUS","IN_PROGRESS_STATUS","state","field","gameStatus","cells","forEach","rowIndex","cellIndex","push","DrawBattlefield","startGame","NEW_GAME","PreloadImages","style","position","top","left","alt","isGameWon","wonFlag","shipsList","ship","life","createShipsList","shipsLayout","positions","body","length","getEmptyField","rowsArray","rowCells","fillFieldWithShips","ships","x","y","initialState","store","createStore","action","initialField","layout","copyState","ReactDOM","render","document","getElementById"],"mappings":"2mBACYA,E,mEAAAA,K,oBAAAA,E,sBAAAA,E,aAAAA,M,KCYZ,IAoBMC,EAAc,CAChBC,KAAM,SAACC,GAAD,ODTH,SAAcA,GACjB,MAAQ,CACJC,KAAMJ,EAAaK,KACnBF,QCMyBD,CAAKC,KAKvBG,EAFGC,YAAQ,KAAMN,EAEjBK,EA1BoB,SAAC,GAAsC,IAArCE,EAAoC,EAApCA,OAAOC,EAA6B,EAA7BA,OAAOC,EAAsB,EAAtBA,YAAYR,EAAU,EAAVA,KAI3DS,QAAQC,IAAR,mBAAwBF,EAAYG,OAApC,YAA8CH,EAAYI,MAC1D,IAAMC,EAAa,qDAGTN,GAAqB,OAAXD,EAAkB,YAAc,GAHjC,yBAITC,GAAqB,OAAXD,EAAkB,eAAiB,GAJpC,cAMnB,OACI,qBACIQ,UAAWD,EACXE,QAba,WACjBf,EAAKQ,SCLEQ,G,MAPW,kBACtB,sBAAKF,UAAU,qBAAf,UACI,qBAAKG,IAAI,iEAAiEH,UAAU,kBACpF,qBAAKA,UAAU,gBAAf,kCC0BKI,G,MAAqB,sBACrBC,EAAqB,qBCenBf,EAFGC,aALD,SAACe,GAAD,MAAwB,CACrCC,MAAOD,EAAMC,MACbC,WAAYF,EAAME,cAKPlB,EApCX,SAAC,GAGO,IAFJiB,EAEG,EAFHA,MACAC,EACG,EADHA,WAgBA,OACI,qBAAKR,UAAU,wBAAf,SAEQQ,IAAeJ,EACX,cAAC,EAAD,IAlBQ,WACpB,IAAMK,EAAmD,GAWzD,OAVAF,EAAMG,SAAQ,SAACZ,EAAKa,GAChBb,EAAIY,SAAS,SAACvB,EAAMyB,GAChBH,EAAMI,KAAK,cAAC,EAAD,CACPpB,OAAQN,EAAKM,OACbC,YAAaP,EAAKO,YAClBF,OAAQL,EAAKK,QAHN,UAICmB,GAJD,OAIYC,WAIxBH,EAOKK,QCFlB7B,G,MAAc,CAChB8B,ULpBG,WACH,MAAQ,CACJ3B,KAAMJ,EAAagC,aK0BZ1B,EALGC,aAVD,SAACe,GACd,MAAO,CACHE,WAAYF,EAAME,cAUtBvB,EAGWK,EAjCX,SAAC,GAGM,IAFFkB,EAEC,EAFDA,WACAO,EACC,EADDA,UAEL,OACI,wBACIf,UAAU,qBACVC,QAASc,EAFb,SAKQP,IAAeJ,EACX,QACA,eCNLa,EAPX,sBAAKC,MANoB,CACzBC,SAAU,QACVC,KAAM,IACNC,MAAO,KAGP,UACI,qBAAKlB,IAAI,wGAAwGmB,IAAI,KACrH,qBAAKnB,IAAI,4FAA4FmB,IAAI,QCR1G,SAASC,EAAUjB,GACtB,IAAIkB,GAAU,EAId,OAHAlB,EAAMmB,UAAUf,SAAQ,SAAAgB,GAChBA,EAAKC,KAAO,IAAGH,GAAU,MAE1BA,GAAWlB,EAAME,aAAeH,E,UCwB5Bf,EAFGC,aAHD,SAACe,GAAD,MAAwB,CACrCiB,UAAWA,EAAUjB,MAIVhB,EAtB2C,SAAC,GAAiB,IAAhBiC,EAAe,EAAfA,UACxD,OACQ,qBAAKvB,UAAU,wBAAf,SAEQuB,GACA,gCACE,qBACEvB,UAAU,oBACVG,IAAI,8FAEN,cAAC,EAAD,YCWPb,EAFGC,aAJD,SAACe,GAAD,MAAwB,CACrCiB,UAAWA,EAAUjB,MAKVhB,EAjBkB,SAAC,GAAiB,IAAhBiC,EAAe,EAAfA,UACjC,OACE,sBAAKvB,UAAU,MAAf,UACGiB,EACD,cAAC,EAAD,KACIM,GAAa,cAAC,EAAD,IACjB,cAAC,EAAD,U,8CCjBC,SAASK,EAAgBC,GAC5B,IADyD,EACrDJ,EAAwB,GAD6B,cAE5BI,GAF4B,IAEzD,IAAI,EAAJ,qBAAyC,CAAC,IAAD,UAAhCH,EAAgC,EAAhCA,KAAMI,EAA0B,EAA1BA,UACXL,EAAUZ,KAAK,CACXkB,KAAMD,EACN1C,KAAMsC,EACNC,KAAMG,EAAUE,UANiC,8BASzD,OAAOP,EAGJ,SAASQ,IAEZ,IADA,IAAMC,EAAoB,GACjBpC,EAAM,EAAGA,EAAM,GAAIA,IAAO,CAE/B,IADA,IAAMqC,EAAyB,GACtBtC,EAAS,EAAGA,EAAS,GAAIA,IAC9BsC,EAAStB,KAAK,CACVnB,YAAa,CACTG,SACAC,OAEJL,QAAQ,EACRD,OAAQ,OAIhB0C,EAAUrB,KAAKsB,GAEnB,OAAOD,EAGJ,SAASE,EAAmB7B,EAAe8B,GAC9CA,EAAM3B,SAAQ,SAACgB,EAAMlC,GACjBkC,EAAKK,KAAKrB,SAAS,SAAAS,GAAa,IAAD,cACbA,EADa,GACpBmB,EADoB,KAClBC,EADkB,KAE3BhC,EAAMgC,GAAGD,GAAG9C,OAASA,QCjC1B,IAAMgD,EAA2B,CACpCf,UAAW,GACXlB,MAAO,GACPC,WAAYJ,GCHhB,IACeqC,EADkBC,aDM1B,WAGQ,IAFXpC,EAEU,uDAFUkC,EACpBG,EACU,uCACV,OAAQA,EAAOvD,MACX,KAAKJ,EAAagC,SACd,IAAM4B,EAAeX,IACfR,EAAYG,EAAgBiB,KAElC,OADAT,EAAmBQ,EAAcnB,GAC1B,CACHA,UAAU,YAAKA,GACflB,MAAM,YAAKqC,GACXpC,WAAYH,GAEpB,KAAKrB,EAAaK,KACd,IAAMyD,EAAS,eAAOxC,GAChBC,EAAQuC,EAAUvC,MAF5B,EAG0BoC,EAAOxD,KAAtBU,EAHX,EAGWA,OAAQC,EAHnB,EAGmBA,IACXX,EAAOoB,EAAMT,GAAKD,GAChBL,EAASL,EAAKK,OAUpB,OARe,OAAXA,GAAoBL,EAAKM,QAClBa,EAAMmB,UAAUjC,GAElBmC,OAETxC,EAAKM,QAAS,EACdqD,EAAUvC,MAAV,YAAsBA,GACtBZ,QAAQC,IAAIkD,GACLA,EACX,QACI,OAAOxC,KCrCuCkC,GCE1DO,IAASC,OACP,cAAC,IAAD,CAAUP,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFQ,SAASC,eAAe,W","file":"static/js/main.53a887bd.chunk.js","sourcesContent":["import {TCoordinates} from \"./types\";\nexport enum EActionTypes {\n    NEW_GAME = 'NEW_GAME',\n    GAME_OVER = 'GAME_OVER',\n    FIRE = 'FIRE'\n}\nexport interface IBaseActionType {\n    type: EActionTypes\n}\n\ninterface INewGameAction extends IBaseActionType{\n    type: EActionTypes.NEW_GAME\n}\n\nexport function newGame(): INewGameAction {\n    return ({\n        type: EActionTypes.NEW_GAME\n    })\n}\n\nexport interface IFireAction extends IBaseActionType {\n    type: EActionTypes.FIRE,\n    cell: TCoordinates\n}\n\nexport function fire(cell: TCoordinates): IFireAction {\n    return ({\n        type: EActionTypes.FIRE,\n        cell\n    })\n}\n\nexport type TGameActions =\n    IFireAction |\n    INewGameAction;\n","import React from 'react';\nimport './Cell.css';\nimport * as settings from '../../gameSettings.json';\nimport { TCoordinates } from \"../../store/types\";\nimport {ConnectedProps, connect} from \"react-redux\";\nimport {fire} from \"../../store/actions\";\n\ntype TCellProps = ConnectedProps<typeof connector> & {\n    coordinates: TCoordinates,\n    isShot: boolean,\n    shipId: number | null;\n}\n\nconst Cell: React.FC<TCellProps> = ({shipId,isShot,coordinates,fire}) => {\n    const clickHandler = () => {\n        fire(coordinates)\n    };\n    console.log(`rerender ${coordinates.column} ${coordinates.row}`);\n    const cellClassName =\n        `\n            Cell-container \n            ${isShot && shipId === null ? 'Cell-shot' : ''}\n            ${isShot && shipId !== null ? 'Cell-on-fire' : ''}\n        `;\n    return (\n        <div\n            className={cellClassName}\n            onClick={clickHandler}>\n\n        </div>\n    )\n};\n\nconst mapDispatch = {\n    fire: (cell:TCoordinates) => fire(cell)\n};\n\nconst connector = connect(null, mapDispatch);\n\nexport default connector(Cell);\n","import React from 'react';\nimport './GameLogo.css';\n\nconst GameLogoComponent = () => (\n    <div className='GameLogo-container'>\n        <img src='https://www.flaticon.com/svg/static/icons/svg/1461/1461855.svg' className='GameLogo-logo'></img>\n        <div className='GameLogo-text'>Battleship v1.0</div>\n    </div>\n);\n\nexport default GameLogoComponent\n","export type TCell = {\n    shipId: number | null,\n    isShot: boolean,\n    coordinates: TCoordinates\n}\n\nexport type TCoordinates = {\n    column: number,\n    row: number,\n}\n\ntype TCellPosition = [number, number];\n\ntype TShipBody = Array<TCellPosition>;\n\nexport type TShipType =\n    'carrier' |\n    'battleship' |\n    'cruiser' |\n    'submarine' |\n    'destroyer' | string;\n\nexport type TShip = {\n    body: TShipBody,\n    type: TShipType,\n    life: number\n}\n\nexport type TShipsList = Array<TShip>;\n\nexport type TField = Array<Array<TCell>>;\n\nexport const NOT_STARTED_STATUS = 'NOT_STARTED_STATUS';\nexport const IN_PROGRESS_STATUS = 'IN_PROGRESS_STATUS';\nexport const GAME_OVER_STATUS = 'GAME_OVER';\n\nexport type TGameStatus = typeof NOT_STARTED_STATUS | typeof  IN_PROGRESS_STATUS | typeof GAME_OVER_STATUS\n\nexport interface IGameState {\n    field: TField,\n    shipsList: TShipsList,\n    gameStatus  : TGameStatus\n}\n","import React, {ReactComponentElement} from 'react';\n\nimport {connect, ConnectedProps} from 'react-redux';\n\nimport Cell from '../Cell/Cell'\nimport GameLogo from '../GameLogo/GameLogo'\nimport './Battlefield.css'\nimport {IGameState, NOT_STARTED_STATUS} from \"../../store/types\";\n\ntype BattlefieldProps = ConnectedProps<typeof connector>;\n\nconst BattlefieldComponent: React.FC<BattlefieldProps> =\n    ({\n        field,\n        gameStatus\n     }) => {\n        const DrawBattlefield = () => {\n            const cells: Array<ReactComponentElement<typeof Cell>> = [];\n            field.forEach((row, rowIndex) => {\n                row.forEach( (cell, cellIndex) => {\n                    cells.push(<Cell\n                        isShot={cell.isShot}\n                        coordinates={cell.coordinates}\n                        shipId={cell.shipId}\n                        key={`${rowIndex}${cellIndex}`}\n                    />);\n                })\n            });\n            return cells;\n        };\n        return (\n            <div className='Battlefield-container'>\n                {\n                    gameStatus === NOT_STARTED_STATUS ?\n                        <GameLogo/> :\n                        DrawBattlefield()\n                }\n            </div>\n        )\n    };\n\nconst mapState = (state: IGameState) => ({\n    field: state.field,\n    gameStatus: state.gameStatus\n});\n\nconst connector = connect(mapState);\n\nexport default connector(BattlefieldComponent);\n","import React  from 'react';\nimport {connect, ConnectedProps} from 'react-redux';\nimport './StartButton.css';\nimport {IGameState, NOT_STARTED_STATUS} from \"../../store/types\";\nimport {newGame} from \"../../store/actions\";\n\ntype TStartButtonProps = ConnectedProps<typeof connector>\n\nconst StartButtonComponent: React.FC<TStartButtonProps> =\n    ({\n         gameStatus,\n         startGame\n    }) => {\n    return (\n        <button\n            className='StartButton-button'\n            onClick={startGame}\n        >\n            {\n                gameStatus === NOT_STARTED_STATUS ?\n                    'Start' :\n                    'Restart'\n            }\n        </button>\n    )\n};\n\nconst mapState = (state: IGameState) => {\n    return {\n        gameStatus: state.gameStatus\n    }\n};\n\nconst mapDispatch = {\n    startGame: newGame\n};\n\nconst connector = connect(\n    mapState,\n    mapDispatch\n);\n\nexport default connector(StartButtonComponent);\n","import React, {CSSProperties} from 'react';\n\nconst style: CSSProperties = {\n    position: \"fixed\",\n    top: -10000,\n    left: -10000\n};\nconst PreloadImages = (\n    <div style={style}>\n        <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d3/Emoji_u1f525.svg/120px-Emoji_u1f525.svg.png\" alt=\"\"/>\n        <img src=\"https://image.freepik.com/free-vector/you-win-lettering-pop-art-text-banner_185004-60.jpg\" alt=\"\"/>\n\n    </div>\n);\n\nexport default PreloadImages;\n","import {IGameState, IN_PROGRESS_STATUS} from \"./types\";\n\nexport function isGameWon(state: IGameState): boolean {\n    let wonFlag = true;\n    state.shipsList.forEach(ship => {\n        if (ship.life > 0) wonFlag = false;\n    });\n    return wonFlag && state.gameStatus === IN_PROGRESS_STATUS;\n}\n","import React from 'react';\nimport {connect, ConnectedProps} from 'react-redux';\nimport {IGameState} from \"../../store/types\";\nimport {isGameWon} from \"../../store/selectors\";\nimport './YouWinPopup.css'\nimport StartButton from '../StartButton';\n\ntype TYouWinPopupProps = ConnectedProps<typeof connector>;\n\nconst YouWinPopupComponent: React.FC<TYouWinPopupProps> = ({isGameWon}) => {\n    return (\n            <div className=\"YouWinPopup-container\">\n                {\n                    isGameWon &&\n                    <div>\n                      <img\n                        className='YouWinPopup-image'\n                        src=\"https://image.freepik.com/free-vector/you-win-lettering-pop-art-text-banner_185004-60.jpg\"\n                      />\n                      <StartButton/>\n                    </div>\n                }\n            </div>\n    )\n};\n\nconst mapState = (state: IGameState) => ({\n    isGameWon: isGameWon(state)\n});\nconst connector = connect(mapState);\n\nexport default connector(YouWinPopupComponent);\n","import React from 'react';\nimport {connect} from 'react-redux';\nimport './App.css';\nimport Battlefield from './components/Battlefield';\nimport StartButton from './components/StartButton';\nimport PreloadImages from './components/PreloadImages';\nimport YouWinPopup from './components/YouWinPopup';\nimport {isGameWon} from \"./store/selectors\";\nimport {ConnectedProps} from \"react-redux\";\nimport {IGameState} from \"./store/types\";\n\ntype TAppProps = ConnectedProps<typeof connector>;\n\nconst App: React.FC<TAppProps> = ({isGameWon}) => {\n  return (\n    <div className=\"App\">\n      {PreloadImages}\n      <Battlefield/>\n        {!isGameWon && <StartButton/>}\n      <YouWinPopup/>\n    </div>\n  );\n};\n\nconst mapState = (state: IGameState) => ({\n    isGameWon: isGameWon(state)\n});\n\nconst connector = connect(mapState);\n\nexport default connector(App);\n","import { TShipsList, TField, TCell} from \"./store/types\";\n\nexport function createShipsList(shipsLayout: any):TShipsList {\n    let shipsList: TShipsList = [];\n    for(let {ship, positions} of shipsLayout){\n        shipsList.push({\n            body: positions,\n            type: ship,\n            life: positions.length\n        })\n    }\n    return shipsList;\n}\n\nexport function getEmptyField(): TField {\n    const rowsArray: TField = [];\n    for (let row = 0; row < 10; row++) {\n        const rowCells: Array<TCell> = [];\n        for (let column = 0; column < 10; column++) {\n            rowCells.push({\n                coordinates: {\n                    column,\n                    row\n                },\n                isShot: false,\n                shipId: null\n\n            })\n        }\n        rowsArray.push(rowCells)\n    }\n    return rowsArray;\n}\n\nexport function fillFieldWithShips(field: TField, ships: TShipsList): void {\n    ships.forEach((ship, shipId) => {\n        ship.body.forEach( position => {\n            const [x,y] = position;\n            field[y][x].shipId = shipId;\n        })\n    })\n}\n","import {IGameState, IN_PROGRESS_STATUS, NOT_STARTED_STATUS, TShip} from \"./types\";\nimport {layout} from \"../gameSettings.json\";\nimport {createShipsList, getEmptyField, fillFieldWithShips} from \"../utils\";\nimport {TGameActions, EActionTypes} from './actions';\n\nexport const initialState: IGameState = {\n    shipsList: [],\n    field: [],\n    gameStatus: NOT_STARTED_STATUS\n};\n\nexport function rootReducer(\n    state: IGameState = initialState,\n    action: TGameActions\n): IGameState {\n    switch (action.type) {\n        case EActionTypes.NEW_GAME:\n            const initialField = getEmptyField();\n            const shipsList = createShipsList(layout);\n            fillFieldWithShips(initialField, shipsList);\n            return {\n                shipsList: [...shipsList],\n                field: [...initialField],\n                gameStatus: IN_PROGRESS_STATUS\n            };\n        case EActionTypes.FIRE:\n            const copyState = {...state};\n            const field = copyState.field;\n            const {column, row} = action.cell;\n            let cell = field[row][column];\n            const shipId = cell.shipId;\n            let ship: TShip;\n            if (shipId !== null && !cell.isShot){\n                ship = state.shipsList[shipId];\n                // a ship was hit\n                ship.life--;\n            }\n            cell.isShot = true;\n            copyState.field = [...field];\n            console.log(copyState);\n            return copyState;\n        default:\n            return state\n    }\n}\n","import {createStore, Store} from \"redux\";\n\nimport {initialState, rootReducer} from './rootReducer';\nimport {IGameState} from \"./types\";\n\nconst store: Store<IGameState> = createStore(rootReducer, initialState);\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}